name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    name: Test on ${{ matrix.vim }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        vim:
          - vim-8.2
          - vim-9.0
          - neovim-0.5
          - neovim-0.9
          - neovim-stable
        exclude:
          # Vim 8.2 might not be easily available on all platforms
          - os: macos-latest
            vim: vim-8.2
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Vim/Neovim
        uses: rhysd/action-setup-vim@v1
        with:
          version: ${{ matrix.vim }}

      - name: Smoke test - Plugin loads
        run: |
          if command -v nvim &> /dev/null; then
            echo "Testing with Neovim"
            nvim --version
            nvim --headless -u NONE \
              -c "set runtimepath+=." \
              -c "runtime plugin/tmc.vim" \
              -c "if exists(':TmcRunTests') | echo 'Plugin loaded successfully' | cquit 0 | else | echo 'Plugin failed to load' | cquit 1 | endif"
          else
            echo "Testing with Vim"
            vim --version
            vim -Nu NONE \
              -c "set runtimepath+=." \
              -c "runtime plugin/tmc.vim" \
              -c "if exists(':TmcRunTests') | echo 'Plugin loaded successfully' | cquit 0 | else | echo 'Plugin failed to load' | cquit 1 | endif"
          fi

      - name: Install Vader.vim
        run: |
          git clone --depth 1 https://github.com/junegunn/vader.vim.git ~/.vim/plugged/vader.vim
          mkdir -p ~/.local/share/nvim/site/pack/vendor/start
          ln -s ~/.vim/plugged/vader.vim ~/.local/share/nvim/site/pack/vendor/start/vader.vim || true

      - name: Run tests
        run: |
          # Find all vader test files
          TEST_FILES=$(find test -name "*.vader" -type f | tr '\n' ' ')
          echo "Found test files: $TEST_FILES"
          
          if command -v nvim &> /dev/null; then
            nvim --version
            for test_file in $TEST_FILES; do
              echo "Running test: $test_file"
              nvim --headless -u NONE \
                -c "set runtimepath+=.,~/.vim/plugged/vader.vim" \
                -c "runtime plugin/tmc.vim" \
                -c "Vader! $test_file" 2>&1 | tee -a test_output.log || echo "Test $test_file had issues (non-blocking)"
            done
          else
            vim --version
            for test_file in $TEST_FILES; do
              echo "Running test: $test_file"
              vim -Nu NONE \
                -c "set runtimepath+=.,~/.vim/plugged/vader.vim" \
                -c "runtime plugin/tmc.vim" \
                -c "Vader! $test_file" 2>&1 | tee -a test_output.log || echo "Test $test_file had issues (non-blocking)"
            done
          fi
          echo "Test run completed"
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.vim }}-${{ matrix.os }}
          path: test_output.log

  lint:
    name: Lint VimScript
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install vint
        run: pip install vim-vint

      - name: Run vint
        run: |
          vint --version
          vint autoload/ plugin/ || true

  docs:
    name: Validate documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README
        run: |
          if ! grep -q "TMC-Vim" README.md; then
            echo "README.md seems invalid"
            exit 1
          fi
          echo "README.md looks good"

      - name: Check help doc exists
        run: |
          if [ ! -f "doc/tmc.txt" ]; then
            echo "Help documentation is missing"
            exit 1
          fi
          echo "Help documentation exists"

      - name: Check LICENSE
        run: |
          if [ ! -f "LICENSE" ]; then
            echo "LICENSE file is missing"
            exit 1
          fi
          echo "LICENSE file exists"

